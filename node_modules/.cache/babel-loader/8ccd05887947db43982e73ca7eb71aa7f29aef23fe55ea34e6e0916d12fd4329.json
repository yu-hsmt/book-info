{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Utilities\nimport { computed, isRef } from 'vue';\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from \"../util/index.mjs\"; // Types\n// Composables\nexport function useColor(colors) {\n  return destructComputed(function () {\n    var classes = [];\n    var styles = {};\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background;\n        if (!colors.value.text && isParsableColor(colors.value.background)) {\n          var backgroundColor = parseColor(colors.value.background);\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            var textColor = getForeground(backgroundColor);\n            styles.color = textColor;\n            styles.caretColor = textColor;\n          }\n        }\n      } else {\n        classes.push(\"bg-\".concat(colors.value.background));\n      }\n    }\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text;\n        styles.caretColor = colors.value.text;\n      } else {\n        classes.push(\"text-\".concat(colors.value.text));\n      }\n    }\n    return {\n      colorClasses: classes,\n      colorStyles: styles\n    };\n  });\n}\nexport function useTextColor(props, name) {\n  var colors = computed(function () {\n    return {\n      text: isRef(props) ? props.value : name ? props[name] : null\n    };\n  });\n  var _useColor = useColor(colors),\n    textColorClasses = _useColor.colorClasses,\n    textColorStyles = _useColor.colorStyles;\n  return {\n    textColorClasses: textColorClasses,\n    textColorStyles: textColorStyles\n  };\n}\nexport function useBackgroundColor(props, name) {\n  var colors = computed(function () {\n    return {\n      background: isRef(props) ? props.value : name ? props[name] : null\n    };\n  });\n  var _useColor2 = useColor(colors),\n    backgroundColorClasses = _useColor2.colorClasses,\n    backgroundColorStyles = _useColor2.colorStyles;\n  return {\n    backgroundColorClasses: backgroundColorClasses,\n    backgroundColorStyles: backgroundColorStyles\n  };\n}","map":{"version":3,"names":["computed","isRef","destructComputed","getForeground","isCssColor","isParsableColor","parseColor","useColor","colors","classes","styles","value","background","backgroundColor","text","a","textColor","color","caretColor","push","concat","colorClasses","colorStyles","useTextColor","props","name","_useColor","textColorClasses","textColorStyles","useBackgroundColor","_useColor2","backgroundColorClasses","backgroundColorStyles"],"sources":["../../src/composables/color.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background\n\n        if (!colors.value.text && isParsableColor(colors.value.background)) {\n          const backgroundColor = parseColor(colors.value.background)\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            const textColor = getForeground(backgroundColor)\n\n            styles.color = textColor\n            styles.caretColor = textColor\n          }\n        }\n      } else {\n        classes.push(`bg-${colors.value.background}`)\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text\n        styles.caretColor = colors.value.text\n      } else {\n        classes.push(`text-${colors.value.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}